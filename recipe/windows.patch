diff --git a/eudist.pyx b/eudist.pyx
index 9f3a289..cabd0e4 100644
--- a/eudist.pyx
+++ b/eudist.pyx
@@ -3,7 +3,7 @@
 # distutils: libraries =
 # distutils: library_dirs =
 # distutils: sources = eudist_cpp.cxx
-# distutils: extra_compile_args = -std=c++11
+# distutils: extra_compile_args =
 
 cimport eudist_cpp as c
 cimport numpy as np
diff --git a/eudist_cpp.cxx b/eudist_cpp.cxx
index afcdc84..1642206 100644
--- a/eudist_cpp.cxx
+++ b/eudist_cpp.cxx
@@ -1,6 +1,7 @@
 #include "eudist_cpp.hxx"
 #include <cmath>
 #include <stdexcept>
+#include <vector>
 
 double dot_dot(const double *a, const double *b, int n) {
   double result = 0;
@@ -22,7 +23,7 @@ double dot_prod(const double *a, const double *b, int n) {
 Plane::Plane(const double *p0, const double *p1, const double *p2, int n)
     : norm(nullptr), dim(n) {
   if (dim == 3) {
-    double v0[dim], v1[dim];
+    double v0[3], v1[3];
     for (int i = 0; i < dim; ++i) {
       v0[i] = p1[i] - p0[i];
       v1[i] = p2[i] - p0[i];
@@ -108,18 +109,20 @@ double line_segment_dot(const double *lp0, const double *lp1, const double *dot,
                         const int n) {
   // Calculate the distance between the line segment defined by two
   // points in line and a dot.
-  double v[n], w[n];
+  std::vector<double> v, w;
+  v.resize(n);
+  w.resize(n);
   for (int i = 0; i < n; ++i) {
     v[i] = lp1[i] - lp0[i];
     w[i] = dot[i] - lp0[i];
   }
 
-  auto c1 = dot_prod(w, v, n);
+  auto c1 = dot_prod(w.data(), v.data(), n);
   if (c1 < 0) {
     return dot_dot(dot, lp0, n);
   }
 
-  auto c2 = dot_prod(v, v, n);
+  auto c2 = dot_prod(v.data(), v.data(), n);
   if (c2 <= c1) {
     return dot_dot(dot, lp1, n);
   }
@@ -128,7 +131,7 @@ double line_segment_dot(const double *lp0, const double *lp1, const double *dot,
     v[i] *= p;
     v[i] += lp0[i];
   }
-  return dot_dot(v, dot, n);
+  return dot_dot(v.data(), dot, n);
 }
 
 double polygon_dot(const double *points, const double *dot, const int num_pnts,
@@ -266,7 +269,7 @@ int PolyMesh::find_cell(const double *dot, int guess) {
     for (int i = -1; i < 2; ++i) {
       for (int j = -1; j < 2; ++j) {
         int pos = guess + i + (ny - 1) * j;
-        if (pos >= 0 and pos < num_cells) {
+        if (pos >= 0 && pos < num_cells) {
           if (winding_number(bounds + pos * 8, dot, 4)) {
             return pos;
           }
diff --git a/setup.py b/setup.py
index 84c64d8..1f89a76 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,5 @@
 from setuptools import Extension, setup
+import os
 
 incdir = ""
 try:
@@ -26,6 +27,7 @@ __version_tuple__ = version_tuple = ({', '.join([repr(x) for x in version.split(
 except ImportError:
     # For some reason setuptool does not install cython, so it is better to error out
     raise
+
     # Ignore error, as otherwise setuptools doesn't know we need cython
     def cythonize(*args, **kwargs):
         pass
@@ -33,7 +35,19 @@ except ImportError:
 
 sourcefiles = ["eudist.pyx", "eudist_cpp.cxx"]
 
-extensions = [Extension("eudist", sourcefiles, include_dirs=[incdir])]
+if os.name == "nt":
+    extra_compile_args = ["/TP", "/permissive-"]
+else:
+    extra_compile_args = ["-std=c++11"]
+
+extensions = [
+    Extension(
+        "eudist",
+        sourcefiles,
+        include_dirs=[incdir],
+        extra_compile_args=extra_compile_args,
+    )
+]
 
 setup(
     use_scm_version=True,
